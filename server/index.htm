<html>
	<head>
		<title>Server</title>
		<meta http-equiv=Content-Type content="text/html; charset=gbk">
		<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css" />
		<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
		<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
		<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="../public/styles/shThemeDefault.css" type="text/css"/>
		<script type="text/javascript" src="../public/scripts/shCore.js"></script>
		<script type="text/javascript" src="../public/scripts/shBrushPhp.js"></script>
		<script type="text/javascript">
			SyntaxHighlighter.defaults['gutter'] = false;
			SyntaxHighlighter.defaults['toolbar'] = false;
			SyntaxHighlighter.all();
		</script>
	</head>

	<body>
		<div class="wiki_content">
			<article>
				<h1>Server</h1>

				<h2>构建Server对象</h2>
				<pre class="brush: php;">$serv = new swoole_server("127.0.0.1", 9501, SWOOLE_BASE, SWOOLE_SOCK_TCP);
</pre>
				
				<blockquote>
					<p>
						swoole_server只能用于php-cli环境
					</p>
				</blockquote>

				<h2>设置运行时参数</h2>
				<pre class="brush: php;">$serv-&gt;set(array('worker_num' =&gt; 4, 'daemonize' =&gt; true));
</pre>
				

 <h2>注册事件回调函数</h2>
				<pre class="brush: php;">$serv-&gt;on('Connect', 'my_onConnect');
$serv-&gt;on('Receive', 'my_onReceive');
$serv-&gt;on('Close', 'my_onClose');
</pre>
				

 <h2>属性列表</h2>
				<pre class="brush: php;">$serv-&gt;manager_pid;  //管理进程的PID，通过向管理进程发送SIGUSR1信号可实现柔性重启
$serv-&gt;master_pid;  //主进程的PID，通过向主进程发送SIGTERM信号可安全关闭服务器
</pre>
				

 <h2>运行流程图</h2>

				<p>
					<img src="../public/images/swoole.jpg" alt="Swoole扩展架构图" />
				</p>

				<h2>进程/线程结构图</h2>

				<p>
					<img src="../public/images/process.jpg"
					alt="Swoole进程/线程结构图" />
				</p>

				<h2>注意事项</h2>

				<ul>
					<li>不要在代码中执行sleep，这样会导致整个进程阻塞</li>
					<li>exit/die是危险的，会导致worker进程退出</li>
					<li>可通过register_shutdown_function来捕获致命错误，在进程异常退出时做一些请求工作，具体如下</li>
				</ul>
				<pre class="brush: php;">register_shutdown_function('handleFatal');
function handleFatal()
{
    $error = error_get_last();
    if (isset($error['type']))
    {
        switch ($error['type'])
        {
            case E_ERROR :
            case E_PARSE :
            case E_DEPRECATED:
            case E_CORE_ERROR :
            case E_COMPILE_ERROR :
                $message = $error['message'];
                $file = $error['file'];
                $line = $error['line'];
                $log = "$message ($file:$line)\nStack trace:\n";
                $trace = debug_backtrace();
                foreach ($trace as $i =&gt; $t)
                {
                    if (!isset($t['file']))
                    {
                        $t['file'] = 'unknown';
                    }
                    if (!isset($t['line']))
                    {
                        $t['line'] = 0;
                    }
                    if (!isset($t['function']))
                    {
                        $t['function'] = 'unknown';
                    }
                    $log .= "#$i {$t['file']}({$t['line']}): ";
                    if (isset($t['object']) &amp;&amp; is_object($t['object']))
                    {
                        $log .= get_class($t['object']) . '-&gt;';
                    }
                    $log .= "{$t['function']}()\n";
                }
                if (isset($_SERVER['REQUEST_URI']))
                {
                    $log .= '[QUERY] ' . $_SERVER['REQUEST_URI'];
                }
                error_log($log);
                $serv-&gt;send($this-&gt;currentFd, $log);
        }
    }
}
</pre>

			</article>
		</div>
	</body>
</html>
