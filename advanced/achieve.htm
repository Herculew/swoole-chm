<html>
<head>
<title>Swoole的实现</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>Swoole的实现</h1>
            
            <p>swoole使用纯C编写，不依赖其他第三方库。</p>
            <ul>
                <li>swoole并没有用libevent，所以不需要安装libevent</li>
                <li>swoole并不依赖php的stream/sockets/pcntl/posix/sysvmsg等扩展</li>
            </ul>
            <h2>socket部分</h2>
            <p>swoole使用底层的socket系统调用。参见 sys/socket.h</p>
            <h2>IO事件循环</h2>
            <ul>
                <li>主进程的事件循环使用select/poll，因为主线程中的文件描述符只有几个，使用select/poll即可</li>
                <li>reactor线程/worker进程中使用epoll/kqueue</li>
            </ul>
            <blockquote>
                <p>有很多人使用strace
                    -p去查看swoole主进程只能看到poll系统调用。正确的查看方法是strace -f -p</p>
            </blockquote>
            <h2>多进程/多线程</h2>
            <ul>
                <li>多进程使用fork()系统调用</li>
                <li>多线程使用pthread线程库</li>
            </ul>
            <h2>EventFd</h2>
            <p>Swoole中使用了eventfd作为线程/进程间消息通知的机制。</p>
            <h2>Timerfd</h2>
            <p>Swoole使用timerfd来实现定时器</p>
            <h2>SIgnalfd</h2>
            <p>swoole中使用了signalfd来实现对信号的屏蔽和处理。可以有效地避免线程/进程被信号打断，系统调用restart的问题。在主进程中reactor线程不会接受任何信号。</p>
        </article>
        
    </div>
</body>
</html>
