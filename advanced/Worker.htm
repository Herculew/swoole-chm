<html>
<head>
<title>Worker进程</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>Worker进程</h1>
            
            <p>Swoole提供了完善的进程管理机制，当Worker进程异常退出，如发生PHP的致命错误、被其他程序误杀，或达到max_request次数之后正常退出。主进程会重新拉起新的Worker进程。
                Worker进程内可以像普通的apache+php或者php-fpm中写代码。不需要像Node.js那样写异步回调的代码。</p>
            <p>
                <strong>主进程内的回调函数</strong>：
            </p>
            <ul>
                <li>onStart</li>
                <li>onShutdown</li>
                <li>onMasterConnect</li>
                <li>onMasterClose</li>
                <li>onTimer</li>
            </ul>
            <p>
                <strong>Worker进程内的回调函数</strong>
            </p>
            <ul>
                <li>onWorkerStart</li>
                <li>onWorkerStop</li>
                <li>onConnect</li>
                <li>onClose</li>
                <li>onReceive</li>
                <li>onTimer</li>
                <li>onFinish</li>
            </ul>
            <p>
                <strong>task_worker进程内的回调函数</strong>
            </p>
            <ul>
                <li>onTask</li>
                <li>onWorkerStart</li>
            </ul>
            <p>
                <strong>管理进程内的回调函数</strong>
            </p>
            <ul>
                <li>onManagerStart</li>
                <li>onManagerStop</li>
            </ul>
        </article>
        
    </div>
</body>
</html>
