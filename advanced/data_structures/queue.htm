<html>
<head>
<title>队列（Queue）</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../../public/css/Word2Chm.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>队列（Queue）</h1>
            
            <p>异步并发的服务器里经常使用队列实现生产者消费者模型，解决并发排队问题。PHP的SPL标准库中提供了<code>SplQueue</code>扩展内置的队列数据结构。另外PHP的数组也提供了<code>array_pop</code>和<code>array_shift</code>可以使用数组模拟队列数据结构。</p>

<h2>SplQueue</h2>

<pre class="brush: php;">$queue = new SplQueue;
//入队
$queue-&gt;push($data);
//出队
$data = $queue-&gt;shift();
//查询队列中的排队数量
$n = count($queue);
</pre>

<h2>Array模拟队列</h2>

<pre class="brush: php;">$queue = array();
//入队
$queue[] = $data;
//出队
$data = array_shift($queue);
//查询队列中的排队数量
$n = count($queue);
</pre>

<h2>性能对比</h2>

<p>虽然使用Array可以实现队列，但实际上性能会非常差。在一个大并发的服务器程序上，建议使用<code>SplQueue</code>作为队列数据结构。</p>

<p>100万条数据随机入队、出队，使用<code>SplQueue</code>仅用<code>2312.345ms</code>即可完成，而使用Array模拟的队列的程序根本无法完成测试，CPU一直持续在100%，降低到1万条后，也需要<code>260ms</code>才能完成测试。</p>

<p>SplQueue</p>

<pre class="brush: php;">$splq = new SplQueue;
for($i = 0; $i &lt; 1000000; $i++)
{
    $data = "hello $i\n";
    $splq-&gt;push($data);

    if ($i % 100 == 99 and count($splq) &gt; 100)
    {
        $popN = rand(10, 99);
        for ($j = 0; $j &lt; $popN; $j++)
        {
            $splq-&gt;shift();
        }
    }
}

$popN = count($splq);
for ($j = 0; $j &lt; $popN; $j++)
{
    $splq-&gt;pop();
}
</pre>

<p>Array队列</p>

<pre class="brush: php;">$arrq = array();
for($i = 0; $i &lt;1000000; $i++)
{
    $data = "hello $i\n";
    $arrq[] = $data;
    if ($i % 100 == 99 and count($arrq) &gt; 100)
    {
        $popN = rand(10, 99);
        for ($j = 0; $j &lt; $popN; $j++)
        {
            array_shift($arrq);
        }
    }
}
$popN = count($arrq);
for ($j = 0; $j &lt; $popN; $j++)
{
    array_shift($arrq);
}
</pre>

        </article>
        
    </div>
</body>
</html>
