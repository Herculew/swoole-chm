<html>
<head>
<title>Swoole - WebSocket</title>
<meta http-equiv=Content-Type content="text/html; charset=gbk">
<link rel="stylesheet" href="../public/css/Word2Chm.css" type="text/css">
<link rel="stylesheet" href="../public/css/default.css" type="text/css" />
<link rel="stylesheet" href="../public/css/noframe.css" type="text/css" />
<link rel="stylesheet" href="../public/css/bootstrap.css" type="text/css" />
<link rel="stylesheet" href="../public/styles/shThemeDefault.css" type="text/css"/>
<script type="text/javascript" src="../public/scripts/shCore.js"></script>
<script type="text/javascript" src="../public/scripts/shBrushPhp.js"></script>
<script type="text/javascript">
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.all();
</script>
</head>
<body>
    <div class="wiki_content">
        <article>
            <h1>WebSocket</h1>
            
            <p>swoole-1.7.9 增加了内置的websocket服务器支持，通过几行PHP代码就可以写出一个异步非阻塞多进程的WebSocket服务器。</p>
            <pre class="brush: php;">$server = new swoole_websocket_server("0.0.0.0", 9501);

$server->on('open', function (swoole_websocket_server $server, $request) {
    echo "server: handshake success with fd{$request->fd}\n";
});

$server->on('message', function (swoole_websocket_server $server, $frame) {
    echo "receive from {$frame->fd}:{$frame->data},opcode:{$frame->opcode},fin:{$frame->finish}\n";
    $server->push($frame->fd, "this is server");
});

$server->on('close', function ($ser, $fd) {
    echo "client {$fd} closed\n";
});

$server->start();
</pre>

        <h2>onRequest回调</h2>
        
        <p>swoole_websocket_server 继承自 swoole_http_server</p>
        <ul>
            <li>设置了onRequest回调，websocket服务器也可以同时作为http服务器</li>
            <li>未设置onRequest回调，websocket服务器收到http请求后会返回<code>http 400</code>错误页面</li>
        </ul>
        </article>
        
    </div>
</body>
</html>
